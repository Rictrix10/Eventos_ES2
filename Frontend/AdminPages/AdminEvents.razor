@page "/adminevents/{idUtilizador}/{nome}"
@using BusinessLogic.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Eventos</PageTitle>

<h1>Eventos</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="AddNewEvent">Criar Evento</button>
    <button class="btn btn-secondary" @onclick="GoBack">Voltar</button>
</div>

@if (events == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table style="width: 100%">
        <tr>
            <th>Nome</th>
            <th>Data</th>
            <th>Hora</th>
            <th>Local</th>
            <th>Descrição</th>
            <th>Capacidade Máxima</th>
            <th>Categoria</th>
            
        </tr>
        <tbody>
        @foreach (var evt in events)
        {
            <tr>    
                <td>@evt.Nome</td>
                <td>@evt.Data</td>
                <td>@evt.Hora</td>
                <td>@evt.Local</td>
                <td>@evt.Descricao</td>
                <td>@evt.Capacidademax</td>
                <td>@evt.Categoria</td>
                

                <td>
                    <button class="btn btn-primary" @onclick="() => EditEvent(evt.IdEvento)">Editar Evento</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => AddTickets(evt.IdEvento)">+ Ingressos</button>
                    
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => AddActivities(evt.IdEvento)">Atividades</button>
                </td>
        <!--
        <td>
            <button class="btn btn-primary" @onclick="() => Relatorio(evt.IdEvento)">Relatório</button>
        </td>
        -->
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    [Parameter]
    public string IdUtilizador { get; set; }

    [Parameter]
    public string Nome { get; set; }

    private int idUtilizador;
    private string nome;
    private bool isSaving = false;

    private EventoViewModel[]? events;

    protected override async Task OnInitializedAsync()
    {
        idUtilizador = Convert.ToInt32(IdUtilizador);
        nome = Nome;

        events = await Http.GetFromJsonAsync<EventoViewModel[]>($"http://localhost:5052/api/Events");
        //events = events.Where(e => e.IdOrganizador == idUtilizador).ToArray();
    }

    private void EditEvent(int eventId)
    {
        var url = $"/editar-evento/{eventId}/{idUtilizador}/{Uri.EscapeDataString(nome)}";
        NavigationManager.NavigateTo(url);
    }

    private void AddActivities(int eventId)
    {   
        var url = $"/atividades/{eventId}/{idUtilizador}/{Uri.EscapeDataString(nome)}";
        NavigationManager.NavigateTo(url);
    }

    private void AddTickets(int eventId)
    {
        var url = $"/registar-ingressos/{eventId}";
        NavigationManager.NavigateTo(url);
    }

    private void AddNewEvent()
    {
        var url = $"/addeventv2/{idUtilizador}/{Uri.EscapeDataString(nome)}";
        NavigationManager.NavigateTo(url);
    }

    private void Relatorio(int eventId)
    {
        /*
        var url = $"/relatorioevento/{eventId}/{idUtilizador}/{Uri.EscapeDataString(nome)}";
        NavigationManager.NavigateTo(url);
        */
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo($"/home-admin/{idUtilizador}/{Uri.EscapeDataString(nome)}");
    }
}
