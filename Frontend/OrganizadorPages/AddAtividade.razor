@page "/addatividade/{EventId}/{idUtilizador}/{nome}"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using BusinessLogic.Entities
@using BusinessLogic.Models
@using Microsoft.AspNetCore.Components
@using Blazorise.Bootstrap
@using BusinessLogic.Entities
@using BusinessLogic.Models
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h3>Criar Atividade</h3>

<EditForm Model="@addatividadeModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Nome:</label>
        <InputText id="name" class="form-control" @bind-Value="@addatividadeModel.Nome" />
        <ValidationMessage For="@(() => addatividadeModel.Nome)" />
    </div>

    <div class="form-group">
        <label for="dateTime">Data:</label>
        <InputDate id="data" @bind-Value="@addatividadeModel.Data" class="form-control" TValue="DateOnly?" />
        <ValidationMessage For="@(() => addatividadeModel.Data)" />
    </div>
    
    <div class="form-group">
        <label for="hora">Hora:</label>
        <InputText id="hora" class="form-control" @bind-Value="@addatividadeModel.HoraString" placeholder="Formato: hh:mm:ss" />
        <ValidationMessage For="@(() => addatividadeModel.HoraString)" />
        <small class="form-text text-muted">Insira a hora no formato hh:mm:ss.</small>
    </div>
    
    <div class="form-group">
        <label for="descricao">Descrição:</label>
        <InputText id="descricao" class="form-control" @bind-Value="@addatividadeModel.Descricao" />
        <ValidationMessage For="@(() => addatividadeModel.Descricao)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@IsFormInvalid()">Registar</button>
    <button class="btn btn-secondary" @onclick="GoBack">Voltar</button>
</EditForm>

@code {
    [Parameter]
    public string EventId { get; set; }

    private int eventId;
    
    [Parameter]
    public string IdUtilizador { get; set; }

    [Parameter]
    public string Nome { get; set; }

    private int idUtilizador;
    private string nome;
    
    private AddAtividadeViewModel addatividadeModel = new AddAtividadeViewModel();
    private EditContext editContext;

    protected override void OnInitialized()
    {
        eventId = Convert.ToInt32(EventId);
        
        addatividadeModel.IdEvento = eventId;
        addatividadeModel.HoraString = "00:00:00"; // Valor padrão

        editContext = new EditContext(addatividadeModel);

        base.OnInitialized();
    }

    private async Task HandleValidSubmit()
    {
        // Verificar se todos os campos obrigatórios foram preenchidos
        if (string.IsNullOrEmpty(addatividadeModel.Nome) || addatividadeModel.Data == null || string.IsNullOrEmpty(addatividadeModel.HoraString) || string.IsNullOrEmpty(addatividadeModel.Descricao))
        {
            Console.WriteLine("Por favor, preencha todos os campos obrigatórios.");
            return;
        }

        // Verificar o formato e a faixa de hora
        if (!ValidateTimeFormat(addatividadeModel.HoraString))
        {
            Console.WriteLine("Formato de hora inválido. Usando valor padrão.");
            addatividadeModel.HoraString = "00:00:00"; // Valor padrão
        }

        // Verificar se Data não é inferior a EventoData e se HoraString não é inferior a EventoHora
        if (addatividadeModel.Data < addatividadeModel.EventoData || (addatividadeModel.Data == addatividadeModel.EventoData && addatividadeModel.Hora < addatividadeModel.EventoHora))
        {
            Console.WriteLine("A data e hora da atividade não podem ser anteriores à data e hora do evento.");
            return;
        }

        try
        {
            var response = await HttpClient.PostAsJsonAsync($"http://localhost:5052/api/Atividades", addatividadeModel);
            response.EnsureSuccessStatusCode();

            Console.WriteLine("Registro concluído com sucesso!");

            // Reset the form
            addatividadeModel = new AddAtividadeViewModel();
            editContext = new EditContext(addatividadeModel);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private bool ValidateTimeFormat(string timeString)
    {
        // Verificar se o formato é "hh:mm:ss"
        if (!Regex.IsMatch(timeString, @"^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"))
        {
            return false;
        }

        // Verificar se as horas, minutos e segundos estão dentro da faixa correta
        var timeParts = timeString.Split(':');
        var hours = int.Parse(timeParts[0]);
        var minutes = int.Parse(timeParts[1]);
        var seconds = int.Parse(timeParts[2]);

        if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59)
        {
            return false;
        }

        return true;
    }
    
    private bool IsFormInvalid()
    {
        var validationContext = new ValidationContext(addatividadeModel);
        var validationResults = new List<ValidationResult>();

        Validator.TryValidateObject(addatividadeModel, validationContext, validationResults, true);

        return validationResults.Any();
    }

    private void GoBack()
    {   
        NavigationManager.NavigateTo("javascript:history.back()");
    }
}
