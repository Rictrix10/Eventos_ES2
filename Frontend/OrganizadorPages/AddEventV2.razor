@page "/addeventv2/{idUtilizador}/{nome}"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using BusinessLogic.Entities
@using BusinessLogic.Models
@using Microsoft.AspNetCore.Components
@using Blazorise.Bootstrap
@using BusinessLogic.Entities
@using BusinessLogic.Models
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h3>Criar evento</h3>

<EditForm Model="@addeventModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Nome:</label>
        <InputText id="name" class="form-control" @bind-Value="@addeventModel.Nome" />
        <ValidationMessage For="@(() => addeventModel.Nome)" />
    </div>

    <div class="form-group">
        <label for="dateTime">Data:</label>
        <InputDate id="data" @bind-Value="@addeventModel.Data" class="form-control" TValue="DateOnly?" />
        <ValidationMessage For="@(() => addeventModel.Data)" />
    </div>

    <div class="form-group">
        <label for="hora">Hora:</label>
        <InputText id="hora" class="form-control" @bind-Value="@addeventModel.HoraString" placeholder="Formato: hh:mm:ss" />
        <ValidationMessage For="@(() => addeventModel.HoraString)" />
        <small class="form-text text-muted">Insira a hora no formato hh:mm:ss.</small>
    </div>

    <div class="form-group">
        <label for="local">Local:</label>
        <InputText id="local" class="form-control" @bind-Value="@addeventModel.Local" />
        <ValidationMessage For="@(() => addeventModel.Local)" />
    </div>

    <div class="form-group">
        <label for="descricao">Descrição:</label>
        <InputText id="descricao" class="form-control" @bind-Value="@addeventModel.Descricao" />
        <ValidationMessage For="@(() => addeventModel.Descricao)" />
    </div>

    <div class="form-group">
        <label for="capacidademax">Capacidade máxima:</label>
        <InputText id="capacidademax" class="form-control" @bind-Value="@addeventModel.CapacidademaxString" />
        <ValidationMessage For="@(() => addeventModel.CapacidademaxString)" />
    </div>

    <div class="form-group">
        <label for="categoria">Categoria:</label>
        <InputText id="categoria" class="form-control" @bind-Value="@addeventModel.Categoria" />
        <ValidationMessage For="@(() => addeventModel.Categoria)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@(!IsFormValid())">Registar</button>
    <button class="btn btn-secondary" @onclick="GoBack">Voltar</button>
</EditForm>


@code {
    [Parameter]
    public string IdUtilizador { get; set; }

    [Parameter]
    public string Nome { get; set; }

    private int idUtilizador;
    private string nome;
    private bool isSaving = false;

    private AddEventViewModelV2 addeventModel = new AddEventViewModelV2();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!int.TryParse(IdUtilizador, out idUtilizador))
        {
            // Handle invalid idUtilizador value
        }

        nome = Nome;

        addeventModel.HoraString = "00:00:00"; // Default value
    }

    private async Task HandleValidSubmit()
    {
        if (isSaving)
        {
            // Evitar salvar duas vezes consecutivas
            return;
        }

        isSaving = true;

        try
        {
            // Assign idUtilizador to the idOrganizador of the event
            addeventModel.IdOrganizador = idUtilizador;

            var response = await HttpClient.PostAsJsonAsync("http://localhost:5052/api/Events", addeventModel);
            response.EnsureSuccessStatusCode();

            var evento = await response.Content.ReadFromJsonAsync<Evento>();
            
            NavigationManager.NavigateTo("javascript:history.back()");

            Console.WriteLine("Registro concluído com sucesso!");
            Console.WriteLine("Dados registrados:");
            Console.WriteLine($"Nome: {addeventModel.Nome}");
            Console.WriteLine($"Data: {addeventModel.Data}");
            Console.WriteLine($"Hora: {addeventModel.Hora}");
            Console.WriteLine($"Local: {addeventModel.Local}");
            Console.WriteLine($"Descrição: {addeventModel.Descricao}");
            Console.WriteLine($"Capacidade Máxima: {addeventModel.Capacidademax}");
            Console.WriteLine($"Categoria: {addeventModel.Categoria}");
            Console.WriteLine($"Id Organizador: {addeventModel.IdOrganizador}");
            Console.WriteLine($"Nome do Organizador: {addeventModel.NomeOrganizador}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private bool IsFormValid()
    {
        // Check if all required fields have been filled
        return !string.IsNullOrWhiteSpace(addeventModel.Nome) &&
               addeventModel.Data != null &&
               !string.IsNullOrWhiteSpace(addeventModel.HoraString) &&
               !string.IsNullOrWhiteSpace(addeventModel.Local) &&
               !string.IsNullOrWhiteSpace(addeventModel.Descricao) &&
               !string.IsNullOrWhiteSpace(addeventModel.CapacidademaxString) &&
               !string.IsNullOrWhiteSpace(addeventModel.Categoria);
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("javascript:history.back()");
    }
}
