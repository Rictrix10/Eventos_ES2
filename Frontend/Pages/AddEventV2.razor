@page "/addeventv2/{idUtilizador}/{nome}"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using BusinessLogic.Entities
@using BusinessLogic.Models
@using Microsoft.AspNetCore.Components
@using Blazorise.Bootstrap
@using BusinessLogic.Entities
@using BusinessLogic.Models
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h3>Criar evento</h3>

<EditForm Model="@addeventModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Nome:</label>
        <InputText id="name" class="form-control" @bind-Value="@addeventModel.Nome" />
        <ValidationMessage For="@(() => addeventModel.Nome)" />
    </div>

    <div class="form-group">
        <label for="dateTime">Data:</label>
        <InputDate id="data" @bind-Value="@addeventModel.Data" class="form-control" TValue="DateOnly?" />
        <ValidationMessage For="@(() => addeventModel.Data)" />
    </div>

    <div class="form-group">
        <label for="hora">Hora:</label>
        <InputText id="hora" class="form-control" @bind-Value="@addeventModel.HoraString" placeholder="Formato: hh:mm:ss" />
        <ValidationMessage For="@(() => addeventModel.HoraString)" />
        <small class="form-text text-muted">Insira a hora no formato hh:mm:ss.</small>
    </div>

    <div class="form-group">
        <label for="local">Local:</label>
        <InputText id="local" class="form-control" @bind-Value="@addeventModel.Local" />
        <ValidationMessage For="@(() => addeventModel.Local)" />
    </div>

    <div class="form-group">
        <label for="descricao">Descrição:</label>
        <InputText id="descricao" class="form-control" @bind-Value="@addeventModel.Descricao" />
        <ValidationMessage For="@(() => addeventModel.Descricao)" />
    </div>

    <div class="form-group">
        <label for="capacidademax">Capacidade máxima:</label>
        <InputText id="capacidademax" class="form-control" @bind-Value="@addeventModel.CapacidademaxString" />
        <ValidationMessage For="@(() => addeventModel.CapacidademaxString)" />
    </div>

    <div class="form-group">
        <label for="categoria">Categoria:</label>
        <InputText id="categoria" class="form-control" @bind-Value="@addeventModel.Categoria" />
        <ValidationMessage For="@(() => addeventModel.Categoria)" />
    </div>

    <button type="submit" class="btn btn-primary">Registar</button>
</EditForm>

@code {
    [Parameter]
    public string IdUtilizador { get; set; }

    [Parameter]
    public string Nome { get; set; }

    private int idUtilizador;
    private string nome;

    private AddEventViewModelV2 addeventModel = new AddEventViewModelV2();

    protected override void OnInitialized()
    {
        if (int.TryParse(IdUtilizador, out var userId))
        {
            addeventModel.Organizador = userId;
        }
        else
        {
            Console.WriteLine("Falha ao converter IdUtilizador para int.");
        }

        addeventModel.NomeOrganizador = Nome;

        addeventModel.HoraString = "00:00:00"; // Valor padrão

        base.OnInitialized();
    }

    private async Task HandleValidSubmit()
    {

    // Verificar o formato e a faixa de hora
        if (!ValidateTimeFormat(addeventModel.HoraString))
        {
            Console.WriteLine("Formato de hora inválido. Usando valor padrão.");
            addeventModel.HoraString = "00:00:00"; // Valor padrão
        }
        
    // Verificar se a capacidade máxima é uma string com no máximo 6 caracteres numéricos
        if (!Regex.IsMatch(addeventModel.CapacidademaxString, "^[0-9]{1,6}$"))
        {
            Console.WriteLine("Capacidade máxima inválida. Ação cancelada.");
            return;
        }

        

        try
        {
            var response = await HttpClient.PostAsJsonAsync("http://localhost:5052/api/Events", addeventModel);
            response.EnsureSuccessStatusCode();

            var evento = await response.Content.ReadFromJsonAsync<Evento>();

            Console.WriteLine("Registro concluído com sucesso!");
            Console.WriteLine("Dados registrados:");
            Console.WriteLine($"Nome: {addeventModel.Nome}");
            Console.WriteLine($"Data: {addeventModel.Data}");
            Console.WriteLine($"Hora: {addeventModel.Hora}");
            Console.WriteLine($"Local: {addeventModel.Local}");
            Console.WriteLine($"Descrição: {addeventModel.Descricao}");
            Console.WriteLine($"Capacidade Máxima: {addeventModel.Capacidademax}");
            Console.WriteLine($"Categoria: {addeventModel.Categoria}");
            Console.WriteLine($"Id Organizador: {addeventModel.Organizador}");
            Console.WriteLine($"Nome do Organizador: {addeventModel.NomeOrganizador}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private bool ValidateTimeFormat(string timeString)
    {
        // Verificar se o formato é "hh:mm:ss"
        if (!Regex.IsMatch(timeString, @"^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"))
        {
            return false;
        }

        // Verificar se as horas, minutos e segundos estão dentro da faixa correta
        var timeParts = timeString.Split(':');
        var hours = int.Parse(timeParts[0]);
        var minutes = int.Parse(timeParts[1]);
        var seconds = int.Parse(timeParts[2]);

        if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59)
        {
            return false;
        }

        return true;
    }
}


