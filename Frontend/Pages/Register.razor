@page "/register"
@using System.ComponentModel.DataAnnotations
@using BusinessLogic.Entities
@using BusinessLogic.Models
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="@registerModel.Nome" />
        <ValidationMessage For="@(() => registerModel.Nome)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="@registerModel.Username" />
        <ValidationMessage For="@(() => registerModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="@registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="form-group">
        <label for="userType">User Type:</label>
        <select id="userType" class="form-control" @bind="@registerModel.Tipo_Utilizador">
            <option value="">-- Select User Type --</option>
            <option value="Organizador">Organizador</option>
            <option value="Participante">Participante</option>
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegisterViewModel registerModel = new RegisterViewModel();

    private async Task HandleValidSubmit()
    {
        try
        {
            // Mapear o valor do User Type selecionado para o código correspondente
            registerModel.Id_Tipo_Utilizador = GetUserTypeCode(registerModel.Tipo_Utilizador);

            var response = await HttpClient.PostAsJsonAsync("http://localhost:5052/api/Utilizadores", registerModel);
            response.EnsureSuccessStatusCode();

            var utilizador = await response.Content.ReadFromJsonAsync<Utilizador>();

            // Após o registro, redirecionar para a página de login
            NavigationManager.NavigateTo("/login");

            Console.WriteLine("Registro concluído com sucesso!");
            Console.WriteLine("Dados registrados:");
            Console.WriteLine($"Nome: {registerModel.Nome}");
            Console.WriteLine($"Email: {registerModel.Email}");
            Console.WriteLine($"Username: {registerModel.Username}");
            Console.WriteLine($"Password: {registerModel.Password}");
            Console.WriteLine($"Id_Tipo_Utilizador: {registerModel.Id_Tipo_Utilizador}");
        }
        catch (Exception ex)
        {
            // Lidar com qualquer erro de requisição ou validação aqui
            Console.WriteLine(ex.Message);
        }
    }

    private int GetUserTypeCode(string userType)
    {
        // Mapear o User Type selecionado para o código correspondente
        // Aqui você pode usar uma lógica específica do seu sistema para mapear o valor
        // Para fins de exemplo, estou retornando um valor fixo para cada User Type
        switch (userType)
        {
            case "Organizador":
                return 1;
            case "Participante":
                return 2;
            default:
                return 0; // Código padrão para um User Type inválido
        }
    }
}
